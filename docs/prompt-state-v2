I'm building an IMAP email filtering and lifecycle manager in Rust, designed specifically for Gmail. The system currently operates in batch mode and is driven by a YAML configuration file. It connects via IMAP, applies user-defined filters to classify and tag messages, and then applies state-based lifecycle logic to age off or preserve messages.

You're being provided:
- The current Rust codebase for the project
- A new version of the `imap-filter.yml` config file, which includes an updated `states:` section that replaces the old `folders:` block
- A detailed specification of the system's intent and behavior (included below)

Your job is to help me update the codebase to support this new model. In particular, I want you to:

1. Read and understand the new YAML structure. It includes:
   - Ordered `filters:` (as a list of one-key dictionaries, order matters)
   - Ordered `states:` (also a list of one-key dictionaries, first match wins)
   - Each `state` defines an IMAP `query`, and must define:
     - `ttl`: one of the following forms:
       - the string `"keep"` (retains the message indefinitely)
       - a flat duration string (e.g., `"7d"`)
       - a map with both `read` and `unread` keys (both required)
     - `action`: optional; either:
       - a folder name (e.g., `ToBeDeleted`)
       - the string `"delete"` (applies the IMAP `\Deleted` flag)
       - if omitted, defaults to `ToBeDeleted`
     - `nerf`: optional boolean to simulate actions without making changes (defaults to false)

2. Guide me through updating the Rust code to:
   - Parse and load this new YAML structure into appropriate structs
   - Evaluate each state in order (top to bottom)
   - For each message in the mailbox:
     - Match it against a single state based on its current IMAP flags and labels
     - If the state has a TTL, evaluate it against the message's INTERNALDATE
     - If the message has expired, apply the `action` as specified
     - Skip destructive operations if `nerf: true`
   - Respect `Starred` and `Important` as terminal states unless the labels are manually removed
   - Ensure message age is *not reset* by label changes — INTERNALDATE is always the reference
   - Consider that thread-level elevation will be added later (but not needed in this first step)

3. Be aware:
   - Gmail labels are handled via `X-GM-LABELS` in IMAP
   - Flags like `\Seen`, `\Starred`, and `\Important` affect matching
   - Label transitions use Gmail’s IMAP extension commands (`UID STORE ... +X-GM-LABELS`, etc.)
   - Deletion uses the IMAP `\Deleted` flag and may later include EXPUNGE
   - The config must be flexible and extensible without recompilation
   - TTL expiration should be safe and predictable — no unintended deletions

Let’s start by defining the Rust structs that will load the new `states:` config block.

After that, we’ll update the main filtering loop to use this state machine logic.

Please respond with a clear plan of how to proceed, starting from config parsing, through evaluation, and finally message mutation (labeling/deletion).

- DO NOT give diffs
- Provide full code blocks of functions or methods of any changes you suggest
- Provide the relative path in the repo to the file you are suggesting each change for
- Do not elide portions of a function block
- Provide code in codeblock in the chat thread
